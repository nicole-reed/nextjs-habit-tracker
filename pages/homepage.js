import Head from 'next/head'
import Layout from '../components/layout'
import { useSession } from "next-auth/react"
import React, { useState, useEffect } from 'react'
import axios from 'axios'

export default function Home() {
    const { data: session } = useSession()
    const [habits, setHabits] = useState({})

    const getAllHabits = async () => {
        try {
            const res = await axios.get('/api/habits')
            // console.log('res', res.data.habits)
            setHabits(res.data.habits)
        } catch (error) {
            console.log(error)
        }
    }
    useEffect(() => {
        getAllHabits()
    }, [])

    if (session) {
        let usersHabits = []
        if (habits.length > 0) {
            console.log('habits', habits)

            usersHabits = habits.filter(habit => habit.userid === session.user.id)
        }

        return (
            <>
                <div>
                    <Head>
                        <title>Home</title>
                        <meta name="description" content="Generated by create next app" />
                        <link rel="icon" href="/favicon.ico" />
                    </Head>
                    <Layout>


                        <main>
                            <h1>
                                Here is where today's habits will be displayed...

                </h1>
                Signed in as {session.user.email} <br />
                ID: {session.user.id}

                            {usersHabits ? usersHabits.map((habit) => (
                                <p key={habit._id}>{habit.name}</p>
                            )) : ''}
                        </main>
                    </Layout>
                </div>


            </>
        )
    }
    return (
        <>
            Not signed in <br />
        </>
    )

}

// export async function getServerSideProps(context) {
//     try {
//         await clientPromise
//         return {
//             props: { isConnected: true },
//         }
//     } catch (e) {
//         console.error(e)
//         return {
//             props: { isConnected: false },
//         }
//     }
// }